// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/bil-message/internal/services/room.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/sbilibin2017/bil-message/internal/models"
)

// MockRoomWriter is a mock of RoomWriter interface.
type MockRoomWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRoomWriterMockRecorder
}

// MockRoomWriterMockRecorder is the mock recorder for MockRoomWriter.
type MockRoomWriterMockRecorder struct {
	mock *MockRoomWriter
}

// NewMockRoomWriter creates a new mock instance.
func NewMockRoomWriter(ctrl *gomock.Controller) *MockRoomWriter {
	mock := &MockRoomWriter{ctrl: ctrl}
	mock.recorder = &MockRoomWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomWriter) EXPECT() *MockRoomWriterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRoomWriter) Delete(ctx context.Context, roomUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, roomUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoomWriterMockRecorder) Delete(ctx, roomUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoomWriter)(nil).Delete), ctx, roomUUID)
}

// Save mocks base method.
func (m *MockRoomWriter) Save(ctx context.Context, roomUUID, ownerUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, roomUUID, ownerUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRoomWriterMockRecorder) Save(ctx, roomUUID, ownerUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRoomWriter)(nil).Save), ctx, roomUUID, ownerUUID)
}

// MockRoomReader is a mock of RoomReader interface.
type MockRoomReader struct {
	ctrl     *gomock.Controller
	recorder *MockRoomReaderMockRecorder
}

// MockRoomReaderMockRecorder is the mock recorder for MockRoomReader.
type MockRoomReaderMockRecorder struct {
	mock *MockRoomReader
}

// NewMockRoomReader creates a new mock instance.
func NewMockRoomReader(ctrl *gomock.Controller) *MockRoomReader {
	mock := &MockRoomReader{ctrl: ctrl}
	mock.recorder = &MockRoomReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomReader) EXPECT() *MockRoomReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRoomReader) Get(ctx context.Context, roomUUID uuid.UUID) (*models.RoomDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, roomUUID)
	ret0, _ := ret[0].(*models.RoomDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRoomReaderMockRecorder) Get(ctx, roomUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoomReader)(nil).Get), ctx, roomUUID)
}

// MockRoomMemberWriter is a mock of RoomMemberWriter interface.
type MockRoomMemberWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRoomMemberWriterMockRecorder
}

// MockRoomMemberWriterMockRecorder is the mock recorder for MockRoomMemberWriter.
type MockRoomMemberWriterMockRecorder struct {
	mock *MockRoomMemberWriter
}

// NewMockRoomMemberWriter creates a new mock instance.
func NewMockRoomMemberWriter(ctrl *gomock.Controller) *MockRoomMemberWriter {
	mock := &MockRoomMemberWriter{ctrl: ctrl}
	mock.recorder = &MockRoomMemberWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomMemberWriter) EXPECT() *MockRoomMemberWriterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRoomMemberWriter) Delete(ctx context.Context, roomUUID, memberUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, roomUUID, memberUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoomMemberWriterMockRecorder) Delete(ctx, roomUUID, memberUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoomMemberWriter)(nil).Delete), ctx, roomUUID, memberUUID)
}

// Save mocks base method.
func (m *MockRoomMemberWriter) Save(ctx context.Context, roomUUID, memberUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, roomUUID, memberUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRoomMemberWriterMockRecorder) Save(ctx, roomUUID, memberUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRoomMemberWriter)(nil).Save), ctx, roomUUID, memberUUID)
}

// MockRoomMemberReader is a mock of RoomMemberReader interface.
type MockRoomMemberReader struct {
	ctrl     *gomock.Controller
	recorder *MockRoomMemberReaderMockRecorder
}

// MockRoomMemberReaderMockRecorder is the mock recorder for MockRoomMemberReader.
type MockRoomMemberReaderMockRecorder struct {
	mock *MockRoomMemberReader
}

// NewMockRoomMemberReader creates a new mock instance.
func NewMockRoomMemberReader(ctrl *gomock.Controller) *MockRoomMemberReader {
	mock := &MockRoomMemberReader{ctrl: ctrl}
	mock.recorder = &MockRoomMemberReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomMemberReader) EXPECT() *MockRoomMemberReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRoomMemberReader) Get(ctx context.Context, roomUUID, memberUUID uuid.UUID) (*models.RoomMemberDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, roomUUID, memberUUID)
	ret0, _ := ret[0].(*models.RoomMemberDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRoomMemberReaderMockRecorder) Get(ctx, roomUUID, memberUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoomMemberReader)(nil).Get), ctx, roomUUID, memberUUID)
}

// MockRoomUserReader is a mock of RoomUserReader interface.
type MockRoomUserReader struct {
	ctrl     *gomock.Controller
	recorder *MockRoomUserReaderMockRecorder
}

// MockRoomUserReaderMockRecorder is the mock recorder for MockRoomUserReader.
type MockRoomUserReaderMockRecorder struct {
	mock *MockRoomUserReader
}

// NewMockRoomUserReader creates a new mock instance.
func NewMockRoomUserReader(ctrl *gomock.Controller) *MockRoomUserReader {
	mock := &MockRoomUserReader{ctrl: ctrl}
	mock.recorder = &MockRoomUserReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomUserReader) EXPECT() *MockRoomUserReaderMockRecorder {
	return m.recorder
}

// GetByUUID mocks base method.
func (m *MockRoomUserReader) GetByUUID(ctx context.Context, userUUID uuid.UUID) (*models.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUUID", ctx, userUUID)
	ret0, _ := ret[0].(*models.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUUID indicates an expected call of GetByUUID.
func (mr *MockRoomUserReaderMockRecorder) GetByUUID(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUUID", reflect.TypeOf((*MockRoomUserReader)(nil).GetByUUID), ctx, userUUID)
}
