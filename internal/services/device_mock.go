// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/bil-message/internal/services/device.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sbilibin2017/bil-message/internal/models"
)

// MockDeviceUserReader is a mock of DeviceUserReader interface.
type MockDeviceUserReader struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceUserReaderMockRecorder
}

// MockDeviceUserReaderMockRecorder is the mock recorder for MockDeviceUserReader.
type MockDeviceUserReaderMockRecorder struct {
	mock *MockDeviceUserReader
}

// NewMockDeviceUserReader creates a new mock instance.
func NewMockDeviceUserReader(ctrl *gomock.Controller) *MockDeviceUserReader {
	mock := &MockDeviceUserReader{ctrl: ctrl}
	mock.recorder = &MockDeviceUserReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceUserReader) EXPECT() *MockDeviceUserReaderMockRecorder {
	return m.recorder
}

// GetByUUID mocks base method.
func (m *MockDeviceUserReader) GetByUUID(ctx context.Context, userUUID string) (*models.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUUID", ctx, userUUID)
	ret0, _ := ret[0].(*models.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUUID indicates an expected call of GetByUUID.
func (mr *MockDeviceUserReaderMockRecorder) GetByUUID(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUUID", reflect.TypeOf((*MockDeviceUserReader)(nil).GetByUUID), ctx, userUUID)
}

// MockDeviceWriter is a mock of DeviceWriter interface.
type MockDeviceWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceWriterMockRecorder
}

// MockDeviceWriterMockRecorder is the mock recorder for MockDeviceWriter.
type MockDeviceWriterMockRecorder struct {
	mock *MockDeviceWriter
}

// NewMockDeviceWriter creates a new mock instance.
func NewMockDeviceWriter(ctrl *gomock.Controller) *MockDeviceWriter {
	mock := &MockDeviceWriter{ctrl: ctrl}
	mock.recorder = &MockDeviceWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceWriter) EXPECT() *MockDeviceWriterMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockDeviceWriter) Save(ctx context.Context, device *models.DeviceDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockDeviceWriterMockRecorder) Save(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDeviceWriter)(nil).Save), ctx, device)
}
