// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/bil-message/internal/services/chat.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sbilibin2017/bil-message/internal/models"
)

// MockChatWriter is a mock of ChatWriter interface.
type MockChatWriter struct {
	ctrl     *gomock.Controller
	recorder *MockChatWriterMockRecorder
}

// MockChatWriterMockRecorder is the mock recorder for MockChatWriter.
type MockChatWriterMockRecorder struct {
	mock *MockChatWriter
}

// NewMockChatWriter creates a new mock instance.
func NewMockChatWriter(ctrl *gomock.Controller) *MockChatWriter {
	mock := &MockChatWriter{ctrl: ctrl}
	mock.recorder = &MockChatWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatWriter) EXPECT() *MockChatWriterMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockChatWriter) Save(ctx context.Context, chatUUID, createdByUUID, participantsUUIDs string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, chatUUID, createdByUUID, participantsUUIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockChatWriterMockRecorder) Save(ctx, chatUUID, createdByUUID, participantsUUIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockChatWriter)(nil).Save), ctx, chatUUID, createdByUUID, participantsUUIDs)
}

// MockChatReader is a mock of ChatReader interface.
type MockChatReader struct {
	ctrl     *gomock.Controller
	recorder *MockChatReaderMockRecorder
}

// MockChatReaderMockRecorder is the mock recorder for MockChatReader.
type MockChatReaderMockRecorder struct {
	mock *MockChatReader
}

// NewMockChatReader creates a new mock instance.
func NewMockChatReader(ctrl *gomock.Controller) *MockChatReader {
	mock := &MockChatReader{ctrl: ctrl}
	mock.recorder = &MockChatReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatReader) EXPECT() *MockChatReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockChatReader) Get(ctx context.Context, chatUUID string) (*models.ChatDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, chatUUID)
	ret0, _ := ret[0].(*models.ChatDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockChatReaderMockRecorder) Get(ctx, chatUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChatReader)(nil).Get), ctx, chatUUID)
}
