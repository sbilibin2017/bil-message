// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/bil-message/internal/services/chat.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sbilibin2017/bil-message/internal/models"
)

// MockChatWriter is a mock of ChatWriter interface.
type MockChatWriter struct {
	ctrl     *gomock.Controller
	recorder *MockChatWriterMockRecorder
}

// MockChatWriterMockRecorder is the mock recorder for MockChatWriter.
type MockChatWriterMockRecorder struct {
	mock *MockChatWriter
}

// NewMockChatWriter creates a new mock instance.
func NewMockChatWriter(ctrl *gomock.Controller) *MockChatWriter {
	mock := &MockChatWriter{ctrl: ctrl}
	mock.recorder = &MockChatWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatWriter) EXPECT() *MockChatWriterMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockChatWriter) Save(ctx context.Context, chat *models.ChatDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, chat)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockChatWriterMockRecorder) Save(ctx, chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockChatWriter)(nil).Save), ctx, chat)
}

// MockChatMemberWriter is a mock of ChatMemberWriter interface.
type MockChatMemberWriter struct {
	ctrl     *gomock.Controller
	recorder *MockChatMemberWriterMockRecorder
}

// MockChatMemberWriterMockRecorder is the mock recorder for MockChatMemberWriter.
type MockChatMemberWriterMockRecorder struct {
	mock *MockChatMemberWriter
}

// NewMockChatMemberWriter creates a new mock instance.
func NewMockChatMemberWriter(ctrl *gomock.Controller) *MockChatMemberWriter {
	mock := &MockChatMemberWriter{ctrl: ctrl}
	mock.recorder = &MockChatMemberWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatMemberWriter) EXPECT() *MockChatMemberWriterMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockChatMemberWriter) Save(ctx context.Context, chatMember *models.ChatMemberDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, chatMember)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockChatMemberWriterMockRecorder) Save(ctx, chatMember interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockChatMemberWriter)(nil).Save), ctx, chatMember)
}
