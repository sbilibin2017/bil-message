// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/bil-message/internal/handlers/room.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRoomCreator is a mock of RoomCreator interface.
type MockRoomCreator struct {
	ctrl     *gomock.Controller
	recorder *MockRoomCreatorMockRecorder
}

// MockRoomCreatorMockRecorder is the mock recorder for MockRoomCreator.
type MockRoomCreatorMockRecorder struct {
	mock *MockRoomCreator
}

// NewMockRoomCreator creates a new mock instance.
func NewMockRoomCreator(ctrl *gomock.Controller) *MockRoomCreator {
	mock := &MockRoomCreator{ctrl: ctrl}
	mock.recorder = &MockRoomCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomCreator) EXPECT() *MockRoomCreatorMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *MockRoomCreator) CreateRoom(ctx context.Context, userUUID uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, userUUID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockRoomCreatorMockRecorder) CreateRoom(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockRoomCreator)(nil).CreateRoom), ctx, userUUID)
}

// MockRoomDeleter is a mock of RoomDeleter interface.
type MockRoomDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockRoomDeleterMockRecorder
}

// MockRoomDeleterMockRecorder is the mock recorder for MockRoomDeleter.
type MockRoomDeleterMockRecorder struct {
	mock *MockRoomDeleter
}

// NewMockRoomDeleter creates a new mock instance.
func NewMockRoomDeleter(ctrl *gomock.Controller) *MockRoomDeleter {
	mock := &MockRoomDeleter{ctrl: ctrl}
	mock.recorder = &MockRoomDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomDeleter) EXPECT() *MockRoomDeleterMockRecorder {
	return m.recorder
}

// DeleteRoom mocks base method.
func (m *MockRoomDeleter) DeleteRoom(ctx context.Context, userUUID, roomUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", ctx, userUUID, roomUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockRoomDeleterMockRecorder) DeleteRoom(ctx, userUUID, roomUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockRoomDeleter)(nil).DeleteRoom), ctx, userUUID, roomUUID)
}

// MockRoomMemberAdder is a mock of RoomMemberAdder interface.
type MockRoomMemberAdder struct {
	ctrl     *gomock.Controller
	recorder *MockRoomMemberAdderMockRecorder
}

// MockRoomMemberAdderMockRecorder is the mock recorder for MockRoomMemberAdder.
type MockRoomMemberAdderMockRecorder struct {
	mock *MockRoomMemberAdder
}

// NewMockRoomMemberAdder creates a new mock instance.
func NewMockRoomMemberAdder(ctrl *gomock.Controller) *MockRoomMemberAdder {
	mock := &MockRoomMemberAdder{ctrl: ctrl}
	mock.recorder = &MockRoomMemberAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomMemberAdder) EXPECT() *MockRoomMemberAdderMockRecorder {
	return m.recorder
}

// AddMember mocks base method.
func (m *MockRoomMemberAdder) AddMember(ctx context.Context, userUUID, roomUUID, memberUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMember", ctx, userUUID, roomUUID, memberUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *MockRoomMemberAdderMockRecorder) AddMember(ctx, userUUID, roomUUID, memberUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockRoomMemberAdder)(nil).AddMember), ctx, userUUID, roomUUID, memberUUID)
}

// MockRoomMemberRemover is a mock of RoomMemberRemover interface.
type MockRoomMemberRemover struct {
	ctrl     *gomock.Controller
	recorder *MockRoomMemberRemoverMockRecorder
}

// MockRoomMemberRemoverMockRecorder is the mock recorder for MockRoomMemberRemover.
type MockRoomMemberRemoverMockRecorder struct {
	mock *MockRoomMemberRemover
}

// NewMockRoomMemberRemover creates a new mock instance.
func NewMockRoomMemberRemover(ctrl *gomock.Controller) *MockRoomMemberRemover {
	mock := &MockRoomMemberRemover{ctrl: ctrl}
	mock.recorder = &MockRoomMemberRemoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomMemberRemover) EXPECT() *MockRoomMemberRemoverMockRecorder {
	return m.recorder
}

// RemoveMember mocks base method.
func (m *MockRoomMemberRemover) RemoveMember(ctx context.Context, userUUID, roomUUID, memberUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", ctx, userUUID, roomUUID, memberUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockRoomMemberRemoverMockRecorder) RemoveMember(ctx, userUUID, roomUUID, memberUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockRoomMemberRemover)(nil).RemoveMember), ctx, userUUID, roomUUID, memberUUID)
}

// MockTokenParser is a mock of TokenParser interface.
type MockTokenParser struct {
	ctrl     *gomock.Controller
	recorder *MockTokenParserMockRecorder
}

// MockTokenParserMockRecorder is the mock recorder for MockTokenParser.
type MockTokenParserMockRecorder struct {
	mock *MockTokenParser
}

// NewMockTokenParser creates a new mock instance.
func NewMockTokenParser(ctrl *gomock.Controller) *MockTokenParser {
	mock := &MockTokenParser{ctrl: ctrl}
	mock.recorder = &MockTokenParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenParser) EXPECT() *MockTokenParserMockRecorder {
	return m.recorder
}

// GetFromRequest mocks base method.
func (m *MockTokenParser) GetFromRequest(r *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromRequest", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromRequest indicates an expected call of GetFromRequest.
func (mr *MockTokenParserMockRecorder) GetFromRequest(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromRequest", reflect.TypeOf((*MockTokenParser)(nil).GetFromRequest), r)
}

// Parse mocks base method.
func (m *MockTokenParser) Parse(tokenString string) (uuid.UUID, uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", tokenString)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Parse indicates an expected call of Parse.
func (mr *MockTokenParserMockRecorder) Parse(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockTokenParser)(nil).Parse), tokenString)
}
