// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/bil-message/internal/handlers/chat.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sbilibin2017/bil-message/internal/models"
)

// MockJWTParser is a mock of JWTParser interface.
type MockJWTParser struct {
	ctrl     *gomock.Controller
	recorder *MockJWTParserMockRecorder
}

// MockJWTParserMockRecorder is the mock recorder for MockJWTParser.
type MockJWTParserMockRecorder struct {
	mock *MockJWTParser
}

// NewMockJWTParser creates a new mock instance.
func NewMockJWTParser(ctrl *gomock.Controller) *MockJWTParser {
	mock := &MockJWTParser{ctrl: ctrl}
	mock.recorder = &MockJWTParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTParser) EXPECT() *MockJWTParserMockRecorder {
	return m.recorder
}

// GetFromRequest mocks base method.
func (m *MockJWTParser) GetFromRequest(r *http.Request) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromRequest", r)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromRequest indicates an expected call of GetFromRequest.
func (mr *MockJWTParserMockRecorder) GetFromRequest(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromRequest", reflect.TypeOf((*MockJWTParser)(nil).GetFromRequest), r)
}

// Parse mocks base method.
func (m *MockJWTParser) Parse(tokenString string) (*models.TokenPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", tokenString)
	ret0, _ := ret[0].(*models.TokenPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockJWTParserMockRecorder) Parse(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockJWTParser)(nil).Parse), tokenString)
}

// MockChatCreator is a mock of ChatCreator interface.
type MockChatCreator struct {
	ctrl     *gomock.Controller
	recorder *MockChatCreatorMockRecorder
}

// MockChatCreatorMockRecorder is the mock recorder for MockChatCreator.
type MockChatCreatorMockRecorder struct {
	mock *MockChatCreator
}

// NewMockChatCreator creates a new mock instance.
func NewMockChatCreator(ctrl *gomock.Controller) *MockChatCreator {
	mock := &MockChatCreator{ctrl: ctrl}
	mock.recorder = &MockChatCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatCreator) EXPECT() *MockChatCreatorMockRecorder {
	return m.recorder
}

// CreateChat mocks base method.
func (m *MockChatCreator) CreateChat(ctx context.Context, userUUID string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", ctx, userUUID)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockChatCreatorMockRecorder) CreateChat(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockChatCreator)(nil).CreateChat), ctx, userUUID)
}

// MockChatMemberAdder is a mock of ChatMemberAdder interface.
type MockChatMemberAdder struct {
	ctrl     *gomock.Controller
	recorder *MockChatMemberAdderMockRecorder
}

// MockChatMemberAdderMockRecorder is the mock recorder for MockChatMemberAdder.
type MockChatMemberAdderMockRecorder struct {
	mock *MockChatMemberAdder
}

// NewMockChatMemberAdder creates a new mock instance.
func NewMockChatMemberAdder(ctrl *gomock.Controller) *MockChatMemberAdder {
	mock := &MockChatMemberAdder{ctrl: ctrl}
	mock.recorder = &MockChatMemberAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatMemberAdder) EXPECT() *MockChatMemberAdderMockRecorder {
	return m.recorder
}

// AddMember mocks base method.
func (m *MockChatMemberAdder) AddMember(ctx context.Context, chatUUID, userUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMember", ctx, chatUUID, userUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *MockChatMemberAdderMockRecorder) AddMember(ctx, chatUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockChatMemberAdder)(nil).AddMember), ctx, chatUUID, userUUID)
}
