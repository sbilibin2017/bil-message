// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/bil-message/internal/handlers/device.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDeviceRegisterer is a mock of DeviceRegisterer interface.
type MockDeviceRegisterer struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRegistererMockRecorder
}

// MockDeviceRegistererMockRecorder is the mock recorder for MockDeviceRegisterer.
type MockDeviceRegistererMockRecorder struct {
	mock *MockDeviceRegisterer
}

// NewMockDeviceRegisterer creates a new mock instance.
func NewMockDeviceRegisterer(ctrl *gomock.Controller) *MockDeviceRegisterer {
	mock := &MockDeviceRegisterer{ctrl: ctrl}
	mock.recorder = &MockDeviceRegistererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRegisterer) EXPECT() *MockDeviceRegistererMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockDeviceRegisterer) Register(ctx context.Context, userUUID uuid.UUID, publicKey string) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, userUUID, publicKey)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockDeviceRegistererMockRecorder) Register(ctx, userUUID, publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDeviceRegisterer)(nil).Register), ctx, userUUID, publicKey)
}
