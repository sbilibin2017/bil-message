// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/bil-message/internal/middlewares/auth.go

// Package middlewares is a generated GoMock package.
package middlewares

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockTokenParser is a mock of TokenParser interface.
type MockTokenParser struct {
	ctrl     *gomock.Controller
	recorder *MockTokenParserMockRecorder
}

// MockTokenParserMockRecorder is the mock recorder for MockTokenParser.
type MockTokenParserMockRecorder struct {
	mock *MockTokenParser
}

// NewMockTokenParser creates a new mock instance.
func NewMockTokenParser(ctrl *gomock.Controller) *MockTokenParser {
	mock := &MockTokenParser{ctrl: ctrl}
	mock.recorder = &MockTokenParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenParser) EXPECT() *MockTokenParserMockRecorder {
	return m.recorder
}

// GetFromRequest mocks base method.
func (m *MockTokenParser) GetFromRequest(r *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromRequest", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromRequest indicates an expected call of GetFromRequest.
func (mr *MockTokenParserMockRecorder) GetFromRequest(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromRequest", reflect.TypeOf((*MockTokenParser)(nil).GetFromRequest), r)
}

// Parse mocks base method.
func (m *MockTokenParser) Parse(tokenString string) (uuid.UUID, uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", tokenString)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Parse indicates an expected call of Parse.
func (mr *MockTokenParserMockRecorder) Parse(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockTokenParser)(nil).Parse), tokenString)
}

// SetToContext mocks base method.
func (m *MockTokenParser) SetToContext(ctx context.Context, userUUID, clientUUID uuid.UUID) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetToContext", ctx, userUUID, clientUUID)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// SetToContext indicates an expected call of SetToContext.
func (mr *MockTokenParserMockRecorder) SetToContext(ctx, userUUID, clientUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToContext", reflect.TypeOf((*MockTokenParser)(nil).SetToContext), ctx, userUUID, clientUUID)
}
