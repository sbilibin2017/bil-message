// Package http Code generated by swaggo/swag. DO NOT EDIT
package http

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/device": {
            "post": {
                "description": "Привязывает новое устройство к пользователю и возвращает UUID устройства",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Добавление нового устройства",
                "parameters": [
                    {
                        "description": "Данные устройства",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.DeviceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UUID устройства",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Неверные учетные данные или некорректные данные запроса"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Проверяет username, password и deviceUUID, возвращает JWT в заголовке Authorization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Вход пользователя",
                "parameters": [
                    {
                        "description": "Данные для входа",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT токен успешно сгенерирован и возвращен в заголовке Authorization"
                    },
                    "400": {
                        "description": "Неверные учетные данные или некорректные данные запроса"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Создаёт нового пользователя с заданными username и password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Регистрация нового пользователя",
                "parameters": [
                    {
                        "description": "Данные пользователя",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Пользователь успешно зарегистрирован"
                    },
                    "400": {
                        "description": "Некорректные данные запроса"
                    },
                    "409": {
                        "description": "Пользователь с таким именем уже существует"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/chat": {
            "post": {
                "description": "Создаёт новую комнату для текущего пользователя",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Создание новой комнаты",
                "responses": {
                    "200": {
                        "description": "UUID комнаты",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Некорректные данные запроса"
                    },
                    "401": {
                        "description": "Неавторизован"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/chat/{chat-uuid}": {
            "delete": {
                "description": "Удаляет комнату по UUID",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Удаление комнаты",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID комнаты",
                        "name": "chat-uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Комната успешно удалена"
                    },
                    "400": {
                        "description": "Некорректные данные запроса"
                    },
                    "401": {
                        "description": "Неавторизован"
                    },
                    "404": {
                        "description": "Комната не найдена"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/chat/{chat-uuid}/{member-uuid}": {
            "post": {
                "description": "Добавляет указанного пользователя (member-uuid) в комнату",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Добавление пользователя в комнату",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID комнаты",
                        "name": "chat-uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UUID пользователя",
                        "name": "member-uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Пользователь успешно добавлен"
                    },
                    "400": {
                        "description": "Некорректные данные запроса"
                    },
                    "401": {
                        "description": "Неавторизован"
                    },
                    "404": {
                        "description": "Комната не найдена"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            },
            "delete": {
                "description": "Удаляет указанного пользователя (member-uuid) из комнаты",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Удаление пользователя из комнаты",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID комнаты",
                        "name": "chat-uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UUID пользователя",
                        "name": "member-uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Пользователь успешно удалён"
                    },
                    "400": {
                        "description": "Некорректные данные запроса"
                    },
                    "401": {
                        "description": "Неавторизован"
                    },
                    "404": {
                        "description": "Комната или пользователь не найдены"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.DeviceRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Пароль пользователя\nrequired: true\nexample: mySecret123",
                    "type": "string"
                },
                "public_key": {
                    "description": "Публичный ключ устройства\nrequired: true\nexample: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr...",
                    "type": "string"
                },
                "username": {
                    "description": "Username пользователя\nrequired: true\nexample: johndoe",
                    "type": "string"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "device_uuid": {
                    "description": "UUID устройства\nrequired: true\nexample: 4c2b87cd-8c44-4546-89df-7a751cbac96e",
                    "type": "string"
                },
                "password": {
                    "description": "Пароль пользователя\nrequired: true\nexample: mySecret123",
                    "type": "string"
                },
                "username": {
                    "description": "Username пользователя\nrequired: true\nexample: johndoe",
                    "type": "string"
                }
            }
        },
        "handlers.RegisterRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Пароль пользователя\nrequired: true\nexample: mySecret123",
                    "type": "string"
                },
                "username": {
                    "description": "Username пользователя\nrequired: true\nexample: johndoe",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "bil-message API",
	Description:      "API для защищённого обмена сообщениями между пользователями",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
